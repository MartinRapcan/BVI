version: '3'

services:
  payload:
    image: node:20-alpine
    restart: always
    ports:
      - '0.0.0.0:3000:3000'  # Expose on all network interfaces
    volumes:
      - .:/home/node/app
      - node_modules:/home/node/app/node_modules
    working_dir: /home/node/app/
    command: sh -c "corepack enable && corepack prepare pnpm@9.0.0 --activate && pnpm install && HOST=0.0.0.0 pnpm dev"
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    environment:
      - HOST=0.0.0.0
      - PAYLOAD_PUBLIC_SERVER_URL=http://0.0.0.0:3000
      - REDIS_URL=redis://redis:6379
    networks:
      - app-network

  # Ensure your DATABASE_URI uses 'postgres' as the hostname
  postgres:
    restart: always
    image: postgres:latest
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    networks:
      - app-network

  # Redis for caching dynamic data
  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - app-network

  # Varnish for HTTP caching
  varnish:
    image: varnish:stable
    restart: always
    ports:
      - "0.0.0.0:80:80"  # Expose on all network interfaces
    volumes:
      - ./varnish:/etc/varnish
    environment:
      - VARNISH_SIZE=512M
    depends_on:
      - payload
    networks:
      - app-network
    command: "-p default_ttl=3600 -p default_grace=3600"

  # Redis Commander - Web UI for Redis monitoring
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
    depends_on:
      - redis
    networks:
      - app-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - app-network

  # Varnish Exporter for Prometheus - Working image
  varnish-exporter:
    image: cdrocker/varnish-prometheus-exporter
    restart: always
    ports:
      - "9131:9131"
    # Use host networking to access varnishstat on the host
    # This is needed because varnishstat might not be available inside the container
    network_mode: "host"
    environment:
      - VARNISH_HOST=localhost
      - VARNISH_PORT=6082
    # Or alternatively mount the varnish socket to allow direct access
    volumes:
      - /var/run/varnish:/var/run/varnish
    command: -no-exit


  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    restart: always
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  node_modules:
  redis_data:
  prometheus_data:
  grafana_data: