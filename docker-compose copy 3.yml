version: '3'

services:
  payload:
    image: node:20-alpine
    restart: always
    ports:
      - '3000:3000'  # Direct access for development
    volumes:
      - .:/home/node/app
      - node_modules:/home/node/app/node_modules
    working_dir: /home/node/app/
    command: sh -c "corepack enable && corepack prepare pnpm@9.0.0 --activate && pnpm install && pnpm run build && HOST=0.0.0.0 pnpm start"
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    environment:
      - HOST=0.0.0.0
      - PAYLOAD_PUBLIC_SERVER_URL=http://0.0.0.0:3000
      - REDIS_URL=redis://redis:6379
    networks:
      - app-network

  # Nginx in the middle
  nginx:
    image: nginx:alpine
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8080:80"  # Direct access to Nginx
    command: sh -c "apk add --no-cache curl && nginx -g 'daemon off;'"
    networks:
      - app-network

  # Nginx Prometheus exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    command: -nginx.scrape-uri=http://nginx/nginx_status
    restart: always
    depends_on:
      - nginx
    networks:
      - app-network

  # Varnish as a caching layer in front of Nginx
  varnish:
    image: varnish:latest
    ports:
      - "8000:80"  # Access Varnish on port 8000
    volumes:
      - ./docker/varnish/default.vcl:/etc/varnish/default.vcl:ro
    command: -f /etc/varnish/default.vcl -s malloc,256m -T localhost:6082
    depends_on:
      - nginx
    networks:
      - app-network

  # Varnish Prometheus exporter - using correct image and parameters
  varnish-exporter:
    image: cdrocker/varnish-prometheus-exporter
    restart: always
    depends_on:
      - varnish
    # Using docker-container-name flag to connect to the varnish container
    command: -docker-container-name=varnish
    networks:
      - app-network


  # Your other services
  postgres:
    restart: always
    image: postgres:latest
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    networks:
      - app-network

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - app-network

  # Redis Prometheus exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis://redis:6379
    restart: always
    depends_on:
      - redis
    networks:
      - app-network

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8081:8080"
    networks:
      - app-network
    restart: always

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  node_modules:
  redis_data:
  prometheus_data:
  grafana_data: